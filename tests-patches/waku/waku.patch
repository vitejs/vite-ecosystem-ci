From 17d4971c4b80802944092be9d203575fa4c36c52 Mon Sep 17 00:00:00 2001
From: sapphi-red <49056869+sapphi-red@users.noreply.github.com>
Date: Wed, 5 Feb 2025 21:04:47 +0900
Subject: [PATCH] temporary commit

---
 e2e/utils.ts                                  | 28 +++++++++++++++----
 packages/waku/src/lib/builder/build.ts        |  3 +-
 .../lib/plugins/vite-plugin-rsc-entries.ts    |  4 ++-
 .../src/lib/plugins/vite-plugin-rsc-rsdw.ts   |  5 ++--
 tsconfig.json                                 |  4 ++-
 5 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/e2e/utils.ts b/e2e/utils.ts
index 687d31a..6e58938 100644
--- a/e2e/utils.ts
+++ b/e2e/utils.ts
@@ -2,7 +2,13 @@ import net from 'node:net';
 import { execSync, exec } from 'node:child_process';
 import { createRequire } from 'node:module';
 import { fileURLToPath } from 'node:url';
-import { cpSync, rmSync, mkdtempSync } from 'node:fs';
+import {
+  cpSync,
+  rmSync,
+  mkdtempSync,
+  writeFileSync,
+  readFileSync,
+} from 'node:fs';
 import { join } from 'node:path';
 import { tmpdir } from 'node:os';
 import type { ChildProcess } from 'node:child_process';
@@ -148,6 +154,10 @@ const PACKAGE_INSTALL = {
 } as const;
 
 export const prepareStandaloneSetup = (fixtureName: string) => {
+  const rootDir = fileURLToPath(new URL('../', import.meta.url));
+  const { pnpm: { overrides: pnpmOverrides } = {} } = createRequire(
+    import.meta.url,
+  )(join(rootDir, 'package.json'));
   const wakuDir = fileURLToPath(new URL('../packages/waku', import.meta.url));
   const { version } = createRequire(import.meta.url)(
     join(wakuDir, 'package.json'),
@@ -176,13 +186,21 @@ export const prepareStandaloneSetup = (fixtureName: string) => {
       execSync(`pnpm pack --pack-destination ${standaloneDir}`, {
         cwd: wakuDir,
       });
+      // workaround for https://github.com/dai-shi/waku/issues/1213
+      const pkg = JSON.parse(readFileSync(join(standaloneDir, 'package.json'), 'utf-8'));
+      pkg.overrides = {
+        vite: pnpmOverrides.vite,
+      };
+      pkg.devDependencies ??= {}
+      pkg.devDependencies.rollup = '^4.34.3';
+      writeFileSync(
+        join(standaloneDir, 'package.json'),
+        JSON.stringify(pkg, null, 2),
+        'utf-8',
+      );
       const wakuPackageTgz = join(standaloneDir, `waku-${version}.tgz`);
       const installScript = PACKAGE_INSTALL[packageManager](wakuPackageTgz);
       execSync(installScript, { cwd: standaloneDir });
-      execSync(
-        `npm install --force ${join(standaloneDir, `waku-${version}.tgz`)}`,
-        { cwd: standaloneDir },
-      );
     }
     if (mode !== 'DEV' && !built) {
       rmSync(`${join(standaloneDir, packageDir, 'dist')}`, {
diff --git a/packages/waku/src/lib/builder/build.ts b/packages/waku/src/lib/builder/build.ts
index cb5eadb..b7c3815 100644
--- a/packages/waku/src/lib/builder/build.ts
+++ b/packages/waku/src/lib/builder/build.ts
@@ -422,7 +422,8 @@ const buildClientBundle = async (
             onwarn,
             // rollup will ouput the style files related to clientEntryFiles, but since it does not find any link to them in the index.html file, it will not inject them. They are only mentioned by the standalone `clientEntryFiles`
             input: clientEntryFiles,
-            preserveEntrySignatures: 'exports-only',
+            // NOTE: rolldown does not support `preserveEntrySignatures`
+            // preserveEntrySignatures: 'exports-only',
             output: {
               entryFileNames: (chunkInfo: { name: string }) => {
                 if (clientEntryFiles[chunkInfo.name]) {
diff --git a/packages/waku/src/lib/plugins/vite-plugin-rsc-entries.ts b/packages/waku/src/lib/plugins/vite-plugin-rsc-entries.ts
index d55072e..595b6c8 100644
--- a/packages/waku/src/lib/plugins/vite-plugin-rsc-entries.ts
+++ b/packages/waku/src/lib/plugins/vite-plugin-rsc-entries.ts
@@ -26,7 +26,9 @@ globalThis.AsyncLocalStorage = require('node:async_hooks').AsyncLocalStorage;
 export function loadModule(id) {
   switch (id) {
     ${Object.entries(opts.moduleMap)
-      .map(([k, v]) => `case '${k}': return import('' + '${v}');`)
+      // NOTE: rolldown tries to resolve `import('' + 'static')`
+      //       so replaced with `import(String('static'))`
+      .map(([k, v]) => `case '${k}': return import(String('${v}'));`)
       .join('\n')}
     default: throw new Error('Cannot find module: ' + id);
   }
diff --git a/packages/waku/src/lib/plugins/vite-plugin-rsc-rsdw.ts b/packages/waku/src/lib/plugins/vite-plugin-rsc-rsdw.ts
index 69e9c3e..68ccc3a 100644
--- a/packages/waku/src/lib/plugins/vite-plugin-rsc-rsdw.ts
+++ b/packages/waku/src/lib/plugins/vite-plugin-rsc-rsdw.ts
@@ -11,7 +11,8 @@ const patchRsdw = (code: string, type: 'SERVER' | 'CLIENT') => {
   }
 
   return code.replaceAll(
-    'function requireAsyncModule(id)',
+    // NOTE: rolldown renames `requireAsyncModule` to `requireAsyncModule$1` in some places
+    /function requireAsyncModule(\$\d)?\(id\)/g,
     `
 globalThis.__WAKU_${type}_MODULE_LOADING__ ||= new Map();
 globalThis.__WAKU_${type}_MODULE_CACHE__ ||= new Map();
@@ -27,7 +28,7 @@ globalThis.__WAKU_${type}_CHUNK_LOAD__ ||= (id) => {
   return globalThis.__WAKU_${type}_MODULE_LOADING__.get(id);
 };
 globalThis.__WAKU_${type}_REQUIRE__ ||= (id) => globalThis.__WAKU_${type}_MODULE_CACHE__.get(id);
-function requireAsyncModule(id)
+function requireAsyncModule$1(id)
 `,
   );
 };
diff --git a/tsconfig.json b/tsconfig.json
index f5c21e1..5530abc 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -4,7 +4,9 @@
     "target": "esnext",
     "downlevelIteration": true,
     "esModuleInterop": true,
-    "module": "nodenext",
+    // NOTE: workaround for https://github.com/rolldown/rolldown/issues/3407
+    "module": "preserve",
+    "moduleResolution": "bundler",
     "skipLibCheck": true,
     "verbatimModuleSyntax": true,
     "noUnusedLocals": true,
-- 
2.47.1

