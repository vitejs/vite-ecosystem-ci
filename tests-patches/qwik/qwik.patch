From 61e26cfeb73dfbdb43b901eaa1dfbbc9b280af5b Mon Sep 17 00:00:00 2001
From: sapphi-red <49056869+sapphi-red@users.noreply.github.com>
Date: Tue, 22 Apr 2025 17:32:52 +0900
Subject: [PATCH] temporary commit

---
 .../qwik/src/optimizer/src/plugins/plugin.ts  | 57 ++++++++++---------
 .../qwik/src/optimizer/src/plugins/rollup.ts  | 17 +++---
 .../qwik/src/optimizer/src/plugins/vite.ts    |  9 ++-
 .../src/optimizer/src/plugins/vite.unit.ts    |  8 +--
 4 files changed, 48 insertions(+), 43 deletions(-)

diff --git a/packages/qwik/src/optimizer/src/plugins/plugin.ts b/packages/qwik/src/optimizer/src/plugins/plugin.ts
index bacf4da..8e33793 100644
--- a/packages/qwik/src/optimizer/src/plugins/plugin.ts
+++ b/packages/qwik/src/optimizer/src/plugins/plugin.ts
@@ -16,7 +16,7 @@ import type {
   TransformModuleInput,
   TransformModulesOptions,
   TransformOutput,
-  SmartEntryStrategy,
+  // SmartEntryStrategy,
   ServerQwikManifest,
 } from '../types';
 import { createLinter, type QwikLinter } from './eslint-plugin';
@@ -497,6 +497,7 @@ export function createQwikPlugin(optimizerOptions: OptimizerOptions = {}) {
         ctx.emitFile({
           id: preloader.id,
           type: 'chunk',
+          // @ts-expect-error rolldown does not support preserveSignature yet
           preserveSignature: 'allow-extension',
         });
         return preloader;
@@ -626,7 +627,7 @@ export function createQwikPlugin(optimizerOptions: OptimizerOptions = {}) {
     ctx: Rollup.PluginContext,
     code: string,
     id: string,
-    transformOpts: Parameters<Extract<Plugin['transform'], Function>>[2] = {}
+    transformOpts: Partial<Parameters<Extract<Plugin['transform'], Function>>[2]> = {}
   ): Promise<TransformResult> {
     if (id.startsWith('\0')) {
       return;
@@ -742,7 +743,8 @@ export function createQwikPlugin(optimizerOptions: OptimizerOptions = {}) {
               ctx.emitFile({
                 id: key,
                 type: 'chunk',
-                preserveSignature: 'allow-extension',
+                // NOTE: rolldown does not support preserveSignature
+                // preserveSignature: 'allow-extension',
               });
             }
           }
@@ -753,9 +755,8 @@ export function createQwikPlugin(optimizerOptions: OptimizerOptions = {}) {
       // unchanged imports are not missing in our internal transform cache
       // This can happen in the repl when the plugin is re-initialized
       // and possibly in other places
-      for (const id of deps.values()) {
-        await ctx.load({ id });
-      }
+      // NOTE: this should be Promise.all rather than a for-loop to avoid deadlocks
+      await Promise.all([...deps.values()].map(id => ctx.load({ id })))
 
       ctx.addWatchFile(id);
 
@@ -905,27 +906,27 @@ export const manifest = ${JSON.stringify(serverManifest)};\n`;
     }
   }
 
-  function manualChunks(id: string, { getModuleInfo }: Rollup.ManualChunkMeta) {
-    // The preloader has to stay in a separate chunk if it's a client build
-    // the vite preload helper must be included or to prevent breaking circular dependencies
-    if (
-      opts.target === 'client' &&
-      (id.endsWith(QWIK_PRELOADER_REAL_ID) || id === '\0vite/preload-helper.js')
-    ) {
-      return 'qwik-preloader';
-    }
-
-    const module = getModuleInfo(id)!;
-    const segment = module.meta.segment as SegmentAnalysis | undefined;
-    if (segment) {
-      const { hash } = segment;
-      const chunkName = (opts.entryStrategy as SmartEntryStrategy).manual?.[hash] || segment.entry;
-      if (chunkName) {
-        return chunkName;
-      }
-    }
-    return null;
-  }
+  // function manualChunks(id: string, { getModuleInfo }: Rollup.ManualChunkMeta) {
+  //   // The preloader has to stay in a separate chunk if it's a client build
+  //   // the vite preload helper must be included or to prevent breaking circular dependencies
+  //   if (
+  //     opts.target === 'client' &&
+  //     (id.endsWith(QWIK_PRELOADER_REAL_ID) || id === '\0vite/preload-helper.js')
+  //   ) {
+  //     return 'qwik-preloader';
+  //   }
+
+  //   const module = getModuleInfo(id)!;
+  //   const segment = module.meta.segment as SegmentAnalysis | undefined;
+  //   if (segment) {
+  //     const { hash } = segment;
+  //     const chunkName = (opts.entryStrategy as SmartEntryStrategy).manual?.[hash] || segment.entry;
+  //     if (chunkName) {
+  //       return chunkName;
+  //     }
+  //   }
+  //   return null;
+  // }
 
   async function generateManifest(
     ctx: Rollup.PluginContext,
@@ -1002,7 +1003,7 @@ export const manifest = ${JSON.stringify(serverManifest)};\n`;
     setSourceMapSupport,
     configureServer,
     handleHotUpdate,
-    manualChunks,
+    // manualChunks,
     generateManifest,
   };
 }
diff --git a/packages/qwik/src/optimizer/src/plugins/rollup.ts b/packages/qwik/src/optimizer/src/plugins/rollup.ts
index ba3002f..b86ac3e 100644
--- a/packages/qwik/src/optimizer/src/plugins/rollup.ts
+++ b/packages/qwik/src/optimizer/src/plugins/rollup.ts
@@ -119,6 +119,7 @@ export function qwikRollup(qwikRollupOpts: QwikRollupPluginOptions = {}): any {
       const opts = qwikPlugin.getOptions();
 
       if (opts.target === 'client') {
+        // @ts-expect-error rolldown type incompat
         await qwikPlugin.generateManifest(this, rollupBundle);
       }
     },
@@ -159,7 +160,7 @@ export function normalizeRollupOutputOptionsObject(
   const outputOpts: Rollup.OutputOptions = { ...rollupOutputOptsObj };
   const opts = qwikPlugin.getOptions();
   const optimizer = qwikPlugin.getOptimizer();
-  const manualChunks = qwikPlugin.manualChunks;
+  // const manualChunks = qwikPlugin.manualChunks;
   if (opts.target === 'client') {
     // client output
     if (!outputOpts.assetFileNames) {
@@ -216,13 +217,13 @@ export function normalizeRollupOutputOptionsObject(
   if (opts.target === 'client') {
     // client should always be es
     outputOpts.format = 'es';
-    const prevManualChunks = outputOpts.manualChunks;
-    if (prevManualChunks && typeof prevManualChunks !== 'function') {
-      throw new Error('manualChunks must be a function');
-    }
-    outputOpts.manualChunks = prevManualChunks
-      ? (id, meta) => prevManualChunks(id, meta) || manualChunks(id, meta)
-      : manualChunks;
+    // const prevManualChunks = outputOpts.manualChunks;
+    // if (prevManualChunks && typeof prevManualChunks !== 'function') {
+    //   throw new Error('manualChunks must be a function');
+    // }
+    // outputOpts.manualChunks = prevManualChunks
+    //   ? (id, meta) => prevManualChunks(id, meta) || manualChunks(id, meta)
+    //   : manualChunks;
   }
 
   if (!outputOpts.dir) {
diff --git a/packages/qwik/src/optimizer/src/plugins/vite.ts b/packages/qwik/src/optimizer/src/plugins/vite.ts
index a1c90a6..429aac1 100644
--- a/packages/qwik/src/optimizer/src/plugins/vite.ts
+++ b/packages/qwik/src/optimizer/src/plugins/vite.ts
@@ -321,9 +321,10 @@ export function qwikVite(qwikViteOpts: QwikVitePluginOptions = {}): any {
              * to impact the build time.
              * https://github.com/QwikDev/qwik/issues/7226#issuecomment-2647122505
              */
-            maxParallelFileOps: 1,
+            // maxParallelFileOps: 1,
             output: {
-              manualChunks: qwikPlugin.manualChunks,
+              // NOTE: rolldown does not support manualChunks
+              // manualChunks: qwikPlugin.manualChunks,
             },
           },
         },
@@ -352,7 +353,8 @@ export function qwikVite(qwikViteOpts: QwikVitePluginOptions = {}): any {
             useAssetsDir,
             buildOutputDir
           ),
-          preserveEntrySignatures: 'exports-only',
+          // NOTE: rolldown does not support preserveEntrySignatures
+          // preserveEntrySignatures: 'exports-only',
           onwarn: (warning, warn) => {
             if (warning.plugin === 'typescript' && warning.message.includes('outputToFilesystem')) {
               return;
@@ -542,6 +544,7 @@ export function qwikVite(qwikViteOpts: QwikVitePluginOptions = {}): any {
 
           const clientManifestStr = await qwikPlugin.generateManifest(
             this,
+            // @ts-expect-error rolldown type incompat
             rollupBundle,
             bundleGraphAdders,
             {
diff --git a/packages/qwik/src/optimizer/src/plugins/vite.unit.ts b/packages/qwik/src/optimizer/src/plugins/vite.unit.ts
index 5009766..d3af46f 100644
--- a/packages/qwik/src/optimizer/src/plugins/vite.unit.ts
+++ b/packages/qwik/src/optimizer/src/plugins/vite.unit.ts
@@ -14,9 +14,9 @@ const chunkInfoMocks: Rollup.PreRenderedChunk[] = [
     facadeModuleId: 'chunk.tsx',
     isDynamicEntry: false,
     isEntry: false,
-    isImplicitEntry: false,
+    // isImplicitEntry: false,
     moduleIds: ['chunk.tsx'],
-    type: 'chunk',
+    // type: 'chunk',
   },
   {
     exports: [''],
@@ -24,9 +24,9 @@ const chunkInfoMocks: Rollup.PreRenderedChunk[] = [
     facadeModuleId: cwd + '/app/chunk.tsx',
     isDynamicEntry: false,
     isEntry: false,
-    isImplicitEntry: false,
+    // isImplicitEntry: false,
     moduleIds: [cwd + '/app/chunk.tsx'],
-    type: 'chunk',
+    // type: 'chunk',
   },
 ];
 
-- 
2.48.1

