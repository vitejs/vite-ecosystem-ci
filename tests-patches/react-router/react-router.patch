From 65142c34518e7fa26ec98fb10b95596e6fa54185 Mon Sep 17 00:00:00 2001
From: sapphi-red <49056869+sapphi-red@users.noreply.github.com>
Date: Wed, 26 Mar 2025 16:55:06 +0900
Subject: [PATCH] temporary commit

---
 integration/helpers/vite-5-template/vite.config.ts |  9 +++++++++
 integration/helpers/vite.ts                        | 11 +++++++++++
 integration/prefetch-test.ts                       | 12 ++++++------
 integration/vite-build-test.ts                     |  7 +++++++
 integration/vite-css-test.ts                       |  9 +++++++++
 integration/vite-presets-test.ts                   | 11 +++++++++--
 packages/react-router-dev/vite/plugin.ts           |  1 +
 7 files changed, 52 insertions(+), 8 deletions(-)

diff --git a/integration/helpers/vite-5-template/vite.config.ts b/integration/helpers/vite-5-template/vite.config.ts
index fac933f..f80ea08 100644
--- a/integration/helpers/vite-5-template/vite.config.ts
+++ b/integration/helpers/vite-5-template/vite.config.ts
@@ -8,4 +8,13 @@ export default defineConfig({
     reactRouter(),
     tsconfigPaths(),
   ],
+  build: {
+    rollupOptions: {
+      // NOTE: ignore built-in minify under development warning
+      onwarn(warning, warn) {
+        if (warning.code === 'MINIFY_WARNING') return
+        warn(warning)
+      }
+    }
+  }
 });
diff --git a/integration/helpers/vite.ts b/integration/helpers/vite.ts
index 7354143..8f9d0c3 100644
--- a/integration/helpers/vite.ts
+++ b/integration/helpers/vite.ts
@@ -95,6 +95,17 @@ export const viteConfig = {
           envOnlyMacros(),
           tsconfigPaths()
         ],
+        build: {
+          rollupOptions: {
+            // NOTE: ignore missing export errors
+            shimMissingExports: true,
+            // NOTE: ignore built-in minify under development warning
+            onwarn(warning, warn) {
+              if (warning.code === 'MINIFY_WARNING') return
+              warn(warning)
+            }
+          }
+        }
       };
     `;
   },
diff --git a/integration/prefetch-test.ts b/integration/prefetch-test.ts
index 211030f..ac4d6a2 100644
--- a/integration/prefetch-test.ts
+++ b/integration/prefetch-test.ts
@@ -156,7 +156,7 @@ test.describe("prefetch=render", () => {
       { state: "attached" }
     );
     await page.waitForSelector(
-      "#nav link[rel='modulepreload'][href^='/assets/chunk-']",
+      "#nav link[rel='modulepreload'][href^='/assets/jsx-runtime-']",
       { state: "attached" }
     );
 
@@ -208,7 +208,7 @@ test.describe("prefetch=intent (hover)", () => {
       { state: "attached" }
     );
     await page.waitForSelector(
-      "#nav link[rel='modulepreload'][href^='/assets/chunk-']",
+      "#nav link[rel='modulepreload'][href^='/assets/jsx-runtime-']",
       { state: "attached" }
     );
     expect(await page.locator("#nav link").count()).toBe(4);
@@ -223,7 +223,7 @@ test.describe("prefetch=intent (hover)", () => {
       { state: "attached" }
     );
     await page.waitForSelector(
-      "#nav link[rel='modulepreload'][href^='/assets/chunk-']",
+      "#nav link[rel='modulepreload'][href^='/assets/jsx-runtime-']",
       { state: "attached" }
     );
     expect(await page.locator("#nav link").count()).toBe(3);
@@ -297,7 +297,7 @@ test.describe("prefetch=intent (focus)", () => {
       { state: "attached" }
     );
     await page.waitForSelector(
-      "#nav link[rel='modulepreload'][href^='/assets/chunk-']",
+      "#nav link[rel='modulepreload'][href^='/assets/jsx-runtime-']",
       { state: "attached" }
     );
     expect(await page.locator("#nav link").count()).toBe(4);
@@ -312,7 +312,7 @@ test.describe("prefetch=intent (focus)", () => {
       { state: "attached" }
     );
     await page.waitForSelector(
-      "#nav link[rel='modulepreload'][href^='/assets/chunk-']",
+      "#nav link[rel='modulepreload'][href^='/assets/jsx-runtime-']",
       { state: "attached" }
     );
     expect(await page.locator("#nav link").count()).toBe(3);
@@ -470,7 +470,7 @@ test.describe("other scenarios", () => {
     // We should not send a second request for this root stylesheet that's
     // already been rendered in the DOM
     let stylesheets = requests.filter(
-      (r) => r.type === "stylesheet" && /\/global-[a-z0-9]+\.css/i.test(r.url)
+      (r) => r.type === "stylesheet" && /\/global-[a-z0-9-]+\.css/i.test(r.url)
     );
     expect(stylesheets.length).toBe(1);
   });
diff --git a/integration/vite-build-test.ts b/integration/vite-build-test.ts
index 59155b5..9672304 100644
--- a/integration/vite-build-test.ts
+++ b/integration/vite-build-test.ts
@@ -39,6 +39,13 @@ test.describe("Build", () => {
                 build: {
                   // force emitting asset files instead of inlined as data-url
                   assetsInlineLimit: 0,
+                  // NOTE: ignore built-in minify under development warning
+                  rollupOptions: {
+                    onwarn(warning, warn) {
+                      if (warning.code === 'MINIFY_WARNING') return
+                      warn(warning)
+                    }
+                  }
                 },
                 plugins: [
                   mdx(),
diff --git a/integration/vite-css-test.ts b/integration/vite-css-test.ts
index 8256dc0..fc51f22 100644
--- a/integration/vite-css-test.ts
+++ b/integration/vite-css-test.ts
@@ -164,6 +164,15 @@ const VITE_CONFIG = async (port: number) => dedent`
         emitCssInSsr: true,
       }),
     ],
+    build: {
+      rollupOptions: {
+        // NOTE: ignore built-in minify under development warning
+        onwarn(warning, warn) {
+          if (warning.code === 'MINIFY_WARNING') return
+          warn(warning)
+        }
+      }
+    }
   }
 `;
 
diff --git a/integration/vite-presets-test.ts b/integration/vite-presets-test.ts
index 12ea017..e43b4c3 100644
--- a/integration/vite-presets-test.ts
+++ b/integration/vite-presets-test.ts
@@ -23,7 +23,7 @@ const files = {
     export default {
       // Ensure user config takes precedence over preset config
       appDirectory: "app",
-      
+
       presets: [
         // Ensure user config is passed to reactRouterConfig hook
         {
@@ -137,8 +137,15 @@ const files = {
     export default {
       build: {
         assetsDir: "custom-assets-dir",
+        rollupOptions: {
+          // NOTE: ignore built-in minify under development warning
+          onwarn(warning: any, warn: any) {
+            if (warning.code === 'MINIFY_WARNING') return
+            warn(warning)
+          }
+        }
       },
-      plugins: [reactRouter()],
+      plugins: [reactRouter()]
     }
   `),
 };
diff --git a/packages/react-router-dev/vite/plugin.ts b/packages/react-router-dev/vite/plugin.ts
index 321b57e..bd83e98 100644
--- a/packages/react-router-dev/vite/plugin.ts
+++ b/packages/react-router-dev/vite/plugin.ts
@@ -3366,6 +3366,7 @@ export async function getEnvironmentOptionsResolvers(
         cssMinify: viteUserConfig.build?.cssMinify ?? true,
         manifest: true, // The manifest is enabled for all builds to detect SSR-only assets
         rollupOptions: {
+          // @ts-expect-error rolldown does not support `preserveEntrySignatures` yet
           preserveEntrySignatures: "exports-only",
           // Silence Rollup "use client" warnings
           // Adapted from https://github.com/vitejs/vite-plugin-react/pull/144
-- 
2.48.1

